---
- name: Install Ansible Software Packages For controlplane
  apt:
    name: "{{ controlplane_packages }}"
    state: present
  with_items:
    - "{{ controlplane_packages }}"

#- name: Install stern
# get_url:
#   url: https://github.com/wercker/stern/releases/download/1.11.0/stern_linux_amd64
#   dest: /usr/local/bin/stern
#   owner: root
#   group: root
#   mode: '0755'

- name: Download Helm Install Script
  get_url:
    url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
    dest: /tmp/get_helm.sh
    owner: root
    group: root
    mode: '0755'

- name: Execute Helm Install Script
  command: bash /tmp/get_helm.sh

- name: Initialize the Kubernetes cluster using kubeadm
  command: kubeadm init --apiserver-advertise-address={{ node_ip }} \
           --apiserver-cert-extra-sans={{ node_ip }}  --node-name={{ ansible_hostname }} \
           --pod-network-cidr=10.240.0.0/16
  when: ansible_facts['hostname'] == "controller-01"

- name: Generate join command
  command: kubeadm token create --print-join-command
  register: join_command
  when: ansible_facts['hostname'] == "controller-01"

- name: Copy join command to local file
  local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"
  when: ansible_facts['hostname'] == "controller-01"

- name: Setup kubeconfig for vagrant user
  file:
    path: /home/vagrant/.kube
    state: directory
    owner: vagrant
    group: vagrant

- name: Setup kubeconfig for vagrant user
  command: "{{ item }}"
  with_items:
    - cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
    - chown vagrant:vagrant /home/vagrant/.kube/config
  when: ansible_facts['hostname'] == "controller-01"

- name: Adding calicoctl Environment Variables To .bashrc
  become: false
  lineinfile:
    dest: ~/.bashrc
    line: '{{ item }}'
    insertbefore: 'set -o vi'
  with_items:
    - 'DATASTORE_TYPE=kubernetes'
    - 'KUBECONFIG=~/.kube/config'
    - 'KUBERNETES_MASTER=https://10.0.1.131:6443'

- name: Add myetcdctl alias to my .bashrc
  become: false
  blockinfile:
    path: ~/.bashrc
    insertafter: EOF
    block: |
      myetcdctl() {
        /usr/bin/sudo ETCDCTL_API=3 etcdctl "$@" --cacert=/etc/kubernetes/pki/etcd/ca.crt \
        --key=/etc/kubernetes/pki/etcd/server.key --cert=/etc/kubernetes/pki/etcd/server.crt
      }

- name: Get latest version of Calico YAML file
  get_url:
    url: "{{ calico_url }}"
    dest: /vagrant/calico-operators/calico.yaml
    backup: true
    force: true
    owner: vagrant
    group: vagrant
    mode: '0755'
  when: ansible_facts['hostname'] == "controller-01"

- name: Install calico pod network with vxlan overlay network
  become: false
  # When using the OPERATOR option to install calico with VXLAN overlay
  #shell: kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.24.3/manifests/tigera-operator.yaml
  shell: kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.24.5/manifests/tigera-operator.yaml
  #shell: kubectl create -f https://projectcalico.docs.tigera.io/manifests/tigera-operator.yaml
  #
  # When using the MANIFEST Option to install calico with IPIP overlay
  #shell: kubectl apply -f /vagrant/calico-operators/calico.yaml
  #shell: kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.24.5/manifests/calico.yaml
  #when: ansible_facts['hostname'] == "controller-01"
  when: ansible_facts['hostname'] == "controller-01" and vxlan == true

# To be used when creating resources with Operator instead of Manifest for VXLAN overlay
- name: Create Calico Resources
  become: false
  shell: kubectl create -f /vagrant/calico-operators/calico-custom-resources.yml
# when: ansible_facts['hostname'] == "controller-01"
  when: ansible_facts['hostname'] == "controller-01" and vxlan == true

- name: Install calico pod network with IPIP overlay network
  become: false
  shell: kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.24.5/manifests/calico.yaml
  when: ansible_facts['hostname'] == "controller-01" and vxlan != true

- name: Install kubectl-calico kubectl plugin
  get_url:
    url: "{{ kubectl_calico_url }}"
    dest: /usr/local/bin/kubectl-calico
    owner: root
    group: root
    mode: '0755'
  when: ansible_facts['hostname'] == "controller-01"

- name: Create kubectl/bash completion
  shell: kubectl completion bash > /tmp/kubectl
  when: ansible_facts['hostname'] == "controller-01"

- name: Move kubectl shell completion file to correct location
  shell: mv /tmp/kubectl /etc/bash_completion.d/kubectl
  when: ansible_facts['hostname'] == "controller-01"

- name: Create helm/bash completion
  shell: helm completion bash > /tmp/helm
  when: ansible_facts['hostname'] == "controller-01"

- name: Move helm shell completion file to correct location
  shell: mv /tmp/helm /etc/bash_completion.d/helm
  when: ansible_facts['hostname'] == "controller-01"

- name: Copy ca.pem from controller-01 to local
  fetch:
    src: /etc/kubernetes/pki/ca.crt
    dest: /home/feathrex/Documents/Udemy/kubernetes-multiha/files/ca.pem
    flat: true
  when: ansible_facts['hostname'] == "controller-01"
