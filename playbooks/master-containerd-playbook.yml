---
- hosts: all
  become: true

  handlers:
  - name: Restart containerd
    service:
      name: containerd
      state: restarted

  - name: Restart SSH
    service:
      name: sshd
      state: restarted

  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: true
      state: restarted

  tasks:
  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes

  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: true
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common
      - net-tools
      - vim
      - ansible
      - ansible-doc
      - ansible-lint
      - yamllint
      - sshpass
      - chrony
      - etcd-client
      - jq
      - traceroute
      - bridge-utils
      - httping
      - sysstat
      - tree
      - sysstat

  - name: Upgrade the OS (apt-get dist-upgrade)
    apt:
      upgrade: dist

  - name: Install CRI containerd, Kubernetes and its dependecies
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: true
    vars:
      packages:
      - containerd
      - kubelet=1.21.2-00
      - kubeadm=1.21.2-00
      - kubectl=1.21.2-00

  - name: Load netfilter kernel module
    modprobe:
      name: "{{ item }}"
      state: present
    with_items:
      - overlay
      - br_netfilter

  - name: Create /etc/containerd
    file:
      path: /etc/containerd
      state: directory
      mode: '0755'
      owner: root
      group: root

  - name: Update /etc/containerd/config.toml
    shell: containerd config default | sudo tee /etc/containerd/config.toml
#   notify:
#     - Restart containerd

  - name: Update /etc/containerd/config.toml
    lineinfile:
      path: /etc/containerd/config.toml
      regex: 'SystemdCgroup'
      line: 'SystemdCgroup = true'
    notify:
      - Restart containerd

# - name: Restart containerd service
#   service:
#     name: containerd
#     state: restarted

  - name: Install stern
    get_url:
      url: https://github.com/wercker/stern/releases/download/1.11.0/stern_linux_amd64
      dest: /usr/local/bin/stern
      owner: root
      group: root
      mode: '0755'

  - name: Download Extract and Install Helm
    unarchive:
      src: https://get.helm.sh/helm-v3.7.0-linux-amd64.tar.gz
      dest: /usr/local/bin/
      remote_src: true
      owner: root
      group: root
      mode: '0755'

  - name: Set sysctl
    sysctl:
      name: "{{ item }}"
      value: '1'
      sysctl_set: true
      state: present
      #reload: yes
    with_items:
      - net.ipv4.ip_forward
      - net.bridge.bridge-nf-call-iptables
      - net.bridge.bridge-nf-call-ip6tables
    notify:
      - Restart containerd

  - name: Enable Chrony
    service:
      name: chrony
      state: started
      enabled: true

  - name: Set timezone to America/Denver
    timezone:
      name: America/Denver

  - name: Allow ssh to host
    lineinfile:
      path: /etc/ssh/sshd_config
      regex: '^PasswordAuthentication'
      line: 'PasswordAuthentication yes'
    notify:
      - Restart SSH

  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0

  - name: Add /etc/host entries
    lineinfile:
      path: /etc/hosts
      line: "{{ item }}"
      state: present
    with_items:
      - '10.0.1.131 controller-01'
      - '10.0.1.132 controller-02'
      - '10.0.1.133 controller-03'
      - '10.0.1.134 worker-01'
      - '10.0.1.135 worker-02'
      - '10.0.1.136 worker-03'
      - '10.0.1.137 worker-04'
      - '10.0.1.130 kubelb-01'
      - '192.168.60.131 controller-01-priv kube-master'
      - '192.168.60.132 controller-02-priv'
      - '192.168.60.133 controller-03-priv'
      - '192.168.60.134 worker-01-priv'
      - '192.168.60.135 worker-02-priv'
      - '192.168.60.136 worker-03-priv'
      - '192.168.60.137 worker-04-priv'
      - '192.168.60.130 kubelb-01-priv'

# - name: Add an apt signing key for Kubernetes
#   apt_key:
#     url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
#     state: present

# - name: Adding apt repository for Kubernetes
#   apt_repository:
#     repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
#     state: present
#     filename: kubernetes

# - name: Install Kubernetes binaries
#   apt:
#     name: "{{ packages }}"
#     state: present
#     update_cache: true
#   vars:
#     packages:
        #- kubelet=1.19.1-00   # =1.16.15-00
        #- kubeadm=1.19.1-00   # =1.16.15-00
        #- kubectl=1.19.1-00   # =1.16.15-00
        #- kubelet=1.21.2-00   # =1.16.15-00
        #- kubeadm=1.21.2-00   # =1.16.15-00
        #- kubectl=1.21.2-00   # =1.16.15-00

  - name: Mark Docker and Kubernetes Packages Hold
    dpkg_selections:
      name: "{{ item }}"
      selection: hold
    with_items:
      - kubelet
      - kubeadm
      - kubectl
      - containerd

  - name: Create /etc/default/kubelet file
    file:
      path: /etc/default/kubelet
      state: touch
      mode: '0644'

  - name: Configure node ip
    lineinfile:
      path: /etc/default/kubelet
      line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}

  - name: Disable multipathd Service
    service:
      name: multipathd
      state: stopped
      enabled: false

  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: true
      state: restarted

  - name: Initialize the Kubernetes cluster using kubeadm
    command: kubeadm init --apiserver-advertise-address={{ node_ip }} \
            --apiserver-cert-extra-sans={{ node_ip }}  --node-name={{ ansible_hostname }} \
            --pod-network-cidr=10.240.0.0/16
    when: ansible_facts['hostname'] == "controller-01"

    # Good kubeadm init command
    #
    #command: kubeadm init --apiserver-advertise-address={{ node_ip }} \
    #       --apiserver-cert-extra-sans={{ node_ip }}  --node-name={{ ansible_hostname }} \
    #       --pod-network-cidr=10.240.0.0/16
    #command: kubeadm init --apiserver-advertise-address="192.168.60.131" \
    #         --apiserver-cert-extra-sans="192.168.60.131"  --node-name={{ ansible_hostname }} \
    #         --pod-network-cidr=10.240.0.0/16


  - name: Update /var/lib/kubelet/kubeadm-flags.env
    lineinfile:
      path: /var/lib/kubelet/kubeadm-flags.env
      regexp: '^KUBELET_KUBEADM_ARGS'
      line: KUBELET_KUBEADM_ARGS="--network-plugin=cni --cgroup-driver=systemd --pod-infra-container-image=k8s.gcr.io/pause:3.4.1"
    when: ansible_facts['hostname'] == "controller-01"

  - name: Generate join command
    command: kubeadm token create --print-join-command
    register: join_command
    when: ansible_facts['hostname'] == "controller-01"

  - name: Copy join command to local file
    local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"
    when: ansible_facts['hostname'] == "controller-01"

  - name: Setup kubeconfig for vagrant user
    file:
      path: /home/vagrant/.kube
      state: directory
      owner: vagrant
      group: vagrant

  - name: Setup kubeconfig for vagrant user
    command: "{{ item }}"
    with_items:
      - cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
      - chown vagrant:vagrant /home/vagrant/.kube/config
    when: ansible_facts['hostname'] == "controller-01"

  - name: Add set -o vi to my .bashrc
    become: false
    lineinfile:
      dest: ~/.bashrc
      regexp: '^set -o vi'
      line: set -o vi

  - name: Set vim as my default editor
    become: false
    lineinfile:
      dest: ~/.bashrc
      line: export EDITOR=vim
      insertbefore: 'set -o vi'

  - name: Add myetcdctl alias to my .bashrc
    become: false
    blockinfile:
      path: ~/.bashrc
      insertafter: EOF
      block: |
        myetcdctl() {
          /usr/bin/sudo ETCDCTL_API=3 etcdctl "$@" --cacert=/etc/kubernetes/pki/etcd/ca.crt \
          --key=/etc/kubernetes/pki/etcd/server.key --cert=/etc/kubernetes/pki/etcd/server.crt
        }

  - name: Create /home/vagrant/.ssh/config
    file:
      path: /home/vagrant/.ssh/config
      state: touch
      owner: vagrant
      group: vagrant
      mode: '0600'

  - name: Update ~/.ssh/config strict host checking
    lineinfile:
      path: /home/vagrant/.ssh/config
      line: StrictHostKeyChecking=no

  - name: Create /etc/crictl.yaml
    copy:
      dest: /etc/crictl.yaml
      owner: root
      group: root
      mode: 0644
      content: |
        runtime-endpoint: unix:///run/containerd/containerd.sock
        image-endpoint: unix:///run/containerd/containerd.sock
        timeout: 2
        debug: false
        pull-image-on-create: true

  - name: Install calico pod network
    become: false
    shell: kubectl create -f https://docs.projectcalico.org/v3.20/manifests/calico.yaml
    #shell: kubectl create -f https://docs.projectcalico.org/v3.19/manifests/calico.yaml
    #shell: kubectl create -f https://docs.projectcalico.org/v3.14/manifests/calico.yaml
    when: ansible_facts['hostname'] == "controller-01"

  - name: Install Kubernetes Dashboard
    become: false
    shell: kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml
    when: ansible_facts['hostname'] == "controller-01"

  - name: Create kubectl/bash completion
    shell: kubectl completion bash > /tmp/kubectl
    when: ansible_facts['hostname'] == "controller-01"

  - name: Move kubectl shell completion file to correct location
    shell: mv /tmp/kubectl /etc/bash_completion.d/kubectl
    become: true
    when: ansible_facts['hostname'] == "controller-01"

  - name: Copy ca.pem from controller-01 to local
    fetch:
      src: /etc/kubernetes/pki/ca.crt
      dest: /home/feathrex/Documents/Udemy/kubernetes-multiha/files/ca.pem
      flat: true
    when: ansible_facts['hostname'] == "controller-01"

  - name: Remove unnecessary apt repo files
    file:
      path: "{{ item }}"
      state: absent
    with_items:
      - /etc/apt/sources.list.d/kubernetes.list
