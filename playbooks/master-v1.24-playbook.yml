---
- hosts: all
  become: true

  roles:
   - common
   - controlplane

#  handlers:
#  - name: Restart containerd
#    service:
#      name: containerd
#      state: restarted
#
#  - name: Restart SSH
#    service:
#      name: sshd
#      state: restarted
#
#  - name: Restart kubelet
#    service:
#      name: kubelet
#      daemon_reload: true
#      state: restarted
#
#  tasks:
#  - name: Add an apt signing key for Kubernetes
#    apt_key:
#      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
#      state: present
#
#  - name: Adding apt repository for Kubernetes
#    apt_repository:
#      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
#      state: present
#      filename: kubernetes
#
#  - name: Add an apt signing key for Docker
#    apt_key:
#      url: https://download.docker.com/linux/ubuntu/gpg
#      state: present
#
#  - name: Add apt repository for containerd from docker.com
#    apt_repository:
#      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
#      state: present
#      filename: docker
#
#  - name: Install Common Software Packages VIA Role
#    apt:
#      name: "{{ os_packages_all }}"
#      state: present
#    with_items: "{{ os_packages_all }}"
#
#  - name: Upgrade the OS (apt-get dist-upgrade)
#    apt:
#      upgrade: dist
#
#  - name: Install K8S Software Packages VIA Role
#    apt:
#      name: "{{ controlplane_packages }}"
#      state: present
#    with_items: "{{ controlplane_packages }}"
#
#  - name: Load netfilter kernel module
#    modprobe:
#      name: "{{ item }}"
#      state: present
#    with_items:
#      - overlay
#      - br_netfilter
#
#  - name: Create /etc/containerd
#    file:
#      path: /etc/containerd
#      state: directory
#      mode: '0755'
#      owner: root
#      group: root
#
#  - name: Update /etc/containerd/config.toml
#    shell: containerd config default | sudo tee /etc/containerd/config.toml
#
#  - name: Update /etc/containerd/config.toml
#    lineinfile:
#      path: /etc/containerd/config.toml
#      regex: 'SystemdCgroup'
#      line: 'SystemdCgroup = true'
#    notify:
#      - Restart containerd
#
#  - name: Install stern
#    get_url:
#      url: https://github.com/wercker/stern/releases/download/1.11.0/stern_linux_amd64
#      dest: /usr/local/bin/stern
#      owner: root
#      group: root
#      mode: '0755'
#
#  - name: Download Helm Install Script
#    get_url:
#      url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
#      dest: /tmp/get_helm.sh
#      owner: root
#      group: root
#      mode: '0755'
#
#  - name: Execute Helm Install Script
#    command: bash /tmp/get_helm.sh
#
#  - name: Set sysctl
#    sysctl:
#      name: "{{ item }}"
#      value: '1'
#      sysctl_set: true
#      state: present
#      reload: yes
#    with_items:
#      - net.ipv4.ip_forward
#      - net.bridge.bridge-nf-call-iptables
#      - net.bridge.bridge-nf-call-ip6tables
#    notify:
#      - Restart containerd
#
#  - meta: flush_handlers
#
#  - name: Enable Chrony
#    service:
#      name: chrony
#      state: started
#      enabled: true
#
#  - name: Disable multipathd service
#    service:
#      name: multipathd
#      state: stopped
#      enabled: false
#
#  - name: Set timezone to America/Denver
#    timezone:
#      name: America/Denver
#
#  - name: Allow ssh to host
#    lineinfile:
#      path: /etc/ssh/sshd_config
#      regex: '^PasswordAuthentication'
#      line: 'PasswordAuthentication yes'
#    notify:
#      - Restart SSH
#
#  - name: Remove swapfile from /etc/fstab
#    mount:
#      name: "{{ item }}"
#      fstype: swap
#      state: absent
#    with_items:
#      - swap
#      - none
#
#  - name: Disable swap
#    command: swapoff -a
#    when: ansible_swaptotal_mb > 0
#
#  - name: Add /etc/host entries
#    lineinfile:
#     path: /etc/hosts
#     line: "{{ item }}"
#     state: present
#    with_items:
#     - '10.0.1.131 controller-01 kube-master'
#     - '10.0.1.132 controller-02'
#     - '10.0.1.133 controller-03'
#     - '10.0.1.134 worker-01'
#     - '10.0.1.135 worker-02'
#     - '10.0.1.136 worker-03'
#     - '10.0.1.137 worker-04'
#     - '10.0.1.130 kubelb-01'
#     - '192.168.60.131 controller-01-priv'
#     - '192.168.60.132 controller-02-priv'
#     - '192.168.60.133 controller-03-priv'
#     - '192.168.60.134 worker-01-priv'
#     - '192.168.60.135 worker-02-priv'
#     - '192.168.60.136 worker-03-priv'
#     - '192.168.60.137 worker-04-priv'
#     - '192.168.60.130 kubelb-01-priv'
#
#  - name: Update /etc/hosts
#    lineinfile:
#      path: /etc/hosts
#      regexp: '^127.0.2.1 controller-01 controller-01'
#      line: '#127.0.2.1 controller-01 controller-01'
#
#  - name: Configure node ip
#    lineinfile:
#      path: /etc/default/kubelet
#      line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}
#      create: yes
#
#  - name: Restart kubelet
#    service:
#      name: kubelet
#      daemon_reload: true
#      state: restarted
#
#  - name: Initialize the Kubernetes cluster using kubeadm
#    command: kubeadm init --apiserver-advertise-address={{ node_ip }} \
#             --apiserver-cert-extra-sans={{ node_ip }}  --node-name={{ ansible_hostname }} \
#             --pod-network-cidr=10.240.0.0/16
#    when: ansible_facts['hostname'] == "controller-01"
#
#  - name: Update /var/lib/kubelet/kubeadm-flags.env
#    lineinfile:
#      path: /var/lib/kubelet/kubeadm-flags.env
#      regexp: '^KUBELET_KUBEADM_ARGS'
#      line: KUBELET_KUBEADM_ARGS="--network-plugin=cni --cgroup-driver=systemd --container-runtime=remote \
#            --container-runtime-endpoint=/var/run/containerd/containerd.sock --pod-infra-container-image=k8s.gcr.io/pause:3.6"
#    when: ansible_facts['hostname'] == "controller-01"
#
#  - name: Generate join command
#    command: kubeadm token create --print-join-command
#    register: join_command
#    when: ansible_facts['hostname'] == "controller-01"
#
#  - name: Copy join command to local file
#    local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"
#    when: ansible_facts['hostname'] == "controller-01"
#
#  - name: Setup kubeconfig for vagrant user
#    file:
#      path: /home/vagrant/.kube
#      state: directory
#      owner: vagrant
#      group: vagrant
#
#  - name: Setup kubeconfig for vagrant user
#    command: "{{ item }}"
#    with_items:
#      - cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
#      - chown vagrant:vagrant /home/vagrant/.kube/config
#    when: ansible_facts['hostname'] == "controller-01"
#
#  - name: Add set -o vi to my .bashrc
#    become: false
#    lineinfile:
#      dest: ~/.bashrc
#      regexp: '^set -o vi'
#      line: set -o vi
#
#  - name: Adding calicoctl Environment Variables To .bashrc
#    become: false
#    lineinfile:
#      dest: ~/.bashrc
#      line: '{{ item }}'
#      insertbefore: 'set -o vi'
#    with_items:
#      - 'DATASTORE_TYPE=kubernetes'
#      - 'KUBECONFIG=~/.kube/config'
#      - 'KUBERNETES_MASTER=https://10.0.1.131:6443'
#
#  - name: Set vim as my default editor
#    become: false
#    lineinfile:
#      dest: ~/.bashrc
#      line: export EDITOR=vim
#      insertbefore: 'set -o vi'
#
#  - name: Add myetcdctl alias to my .bashrc
#    become: false
#    blockinfile:
#      path: ~/.bashrc
#      insertafter: EOF
#      block: |
#        myetcdctl() {
#          /usr/bin/sudo ETCDCTL_API=3 etcdctl "$@" --cacert=/etc/kubernetes/pki/etcd/ca.crt \
#          --key=/etc/kubernetes/pki/etcd/server.key --cert=/etc/kubernetes/pki/etcd/server.crt
#        }
#
#  - name: Create /home/vagrant/.vimrc with content
#    lineinfile:
#      path: /home/vagrant/.vimrc
#      line: set tabstop=2 shiftwidth=2 softtabstop=2 smarttab expandtab
#      create: yes
#
#  - name: Add vagrant user to root group
#    user:
#      name: vagrant
#      groups: root
#      append: true
#
#  - name: Create /home/vagrant/.ssh/config with strict host checking
#    lineinfile:
#      path: /home/vagrant/.ssh/config
#      line: StrictHostKeyChecking=no
#      create: yes
#
#  - name: Create /etc/crictl.yaml
#    copy:
#      dest: /etc/crictl.yaml
#      owner: root
#      group: root
#      mode: 0644
#      content: |
#        runtime-endpoint: unix:///run/containerd/containerd.sock
#        image-endpoint: unix:///run/containerd/containerd.sock
#        timeout: 2
#        debug: false
#        pull-image-on-create: true
#
#  - name: Install calico pod network
#    become: false
#    shell: kubectl create -f https://projectcalico.docs.tigera.io/manifests/tigera-operator.yaml
#    when: ansible_facts['hostname'] == "controller-01"
#
#  - name: Create Calico Resources
#    become: false
#    shell: kubectl create -f /vagrant/calico-operators/calico-custom-resources.yml
#
#  - name: Install kubectl-calico kubectl plugin
#    get_url:
#      url: https://github.com/projectcalico/calico/releases/download/v3.23.2/calicoctl-linux-amd64
#      dest: /usr/local/bin/kubectl-calico
#      owner: root
#      group: root
#      mode: '0755'
#
#  - name: Create kubectl/bash completion
#    shell: kubectl completion bash > /tmp/kubectl
#    when: ansible_facts['hostname'] == "controller-01"
#
#  - name: Move kubectl shell completion file to correct location
#    shell: mv /tmp/kubectl /etc/bash_completion.d/kubectl
#    when: ansible_facts['hostname'] == "controller-01"
#
#  - name: Create helm/bash completion
#    shell: helm completion bash > /tmp/helm
#    when: ansible_facts['hostname'] == "controller-01"
#
#  - name: Move helm shell completion file to correct location
#    shell: mv /tmp/helm /etc/bash_completion.d/helm
#    when: ansible_facts['hostname'] == "controller-01"
#
#  - name: Copy ca.pem from controller-01 to local
#    fetch:
#      src: /etc/kubernetes/pki/ca.crt
#      dest: /home/feathrex/Documents/Udemy/kubernetes-multiha/files/ca.pem
#      flat: true
#    when: ansible_facts['hostname'] == "controller-01"
